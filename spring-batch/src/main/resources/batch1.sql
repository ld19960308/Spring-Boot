drop table if exists batch_job_execution_params;
CREATE TABLE BATCH_JOB_EXECUTION_PARAMS  (
    JOB_EXECUTION_ID int NOT NULL,
    TYPE_CD varchar(6) NOT NULL,
    KEY_NAME varchar(100) NOT NULL,
    STRING_VAL varchar(250),
    DATE_VAL TIMESTAMP NULL,
    LONG_VAL int,
    DOUBLE_VAL int,
    IDENTIFYING CHAR(1) NOT NULL,
    constraint JOB_EXEC_PARAMS_FK foreign key (JOB_EXECUTION_ID)
    references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
) ;
drop table if exists batch_step_execution;
CREATE TABLE BATCH_STEP_EXECUTION  (
    STEP_EXECUTION_ID int  NOT NULL PRIMARY KEY,
    VERSION int NOT NULL,
    STEP_NAME varchar(100) NOT NULL,
    JOB_EXECUTION_ID int NOT NULL,
    START_TIME TIMESTAMP NOT NULL,
    END_TIME TIMESTAMP NULL,
    STATUS varchar(10),
    COMMIT_COUNT int,
    READ_COUNT int,
    FILTER_COUNT int,
    WRITE_COUNT int,
    READ_SKIP_COUNT int,
    WRITE_SKIP_COUNT int,
    PROCESS_SKIP_COUNT int,
    ROLLBACK_COUNT int,
    EXIT_CODE varchar(2500),
    EXIT_MESSAGE varchar(2500),
    LAST_UPDATED TIMESTAMP,
    constraint JOB_EXEC_STEP_FK foreign key (JOB_EXECUTION_ID)
    references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
) ;
drop table if exists batch_step_execution_context;
CREATE TABLE BATCH_STEP_EXECUTION_CONTEXT  (
    STEP_EXECUTION_ID int NOT NULL PRIMARY KEY,
    SHORT_CONTEXT varchar(2500) NOT NULL,
    SERIALIZED_CONTEXT LONGTEXT,
    constraint STEP_EXEC_CTX_FK foreign key (STEP_EXECUTION_ID)
    references BATCH_STEP_EXECUTION(STEP_EXECUTION_ID)
) ;
drop table if exists BATCH_JOB_EXECUTION_CONTEXT;
CREATE TABLE BATCH_JOB_EXECUTION_CONTEXT  (
    JOB_EXECUTION_ID int NOT NULL PRIMARY KEY,
    SHORT_CONTEXT varchar(2500) NOT NULL,
    SERIALIZED_CONTEXT LONGTEXT,
    constraint JOB_EXEC_CTX_FK foreign key (JOB_EXECUTION_ID)
    references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
) ;